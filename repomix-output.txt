This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-03T08:10:33.725Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    feature_request.md
public/
  favicon/
    browserconfig.xml
    safari-pinned-tab.svg
    site.webmanifest
  robots.txt
src/
  assets/
    styles/
      themes/
        dark.css
        light.css
      fonts.css
      main.css
      reset.css
      vars.css
  components/
    common/
      TheColorThemeToggle.vue
      TheGitHubLink.vue
      TheHeader.vue
      TheHeaderMenu.vue
      TheMainLogo.vue
    icons/
      IconClose.vue
      IconDots.vue
      IconFolderEmpty.vue
      IconGitHubLogo.vue
      IconLayoutsLeft.vue
      IconLayoutsRight.vue
      IconMoon.vue
      IconPlus.vue
      IconSidebar.vue
      IconSun.vue
      IconTrash.vue
    settings/
      SettingsBody.vue
      SettingsBodyAbout.vue
      SettingsBodyColors.vue
      SettingsBodyHotKeys.vue
      SettingsBodyLayouts.vue
      SettingsHead.vue
      SettingsHeadClose.vue
      SettingsHeadTitle.vue
      TheSettings.vue
    AppArea.vue
    AppBase.vue
    AppBaseBody.vue
    AppBaseTop.vue
    AppControls.vue
    AppControlsBtn.vue
    AppSearch.vue
    AppSearchInput.vue
    AppSearchSidebarToggle.vue
    AppSideBar.vue
    AppSidebarList.vue
    AppSidebarListItem.vue
    AppTitle.vue
  directives/
    doubleTapDirective.ts
    showPerformanceDirective.ts
  helpers/
    FixIphoneResizeViewPort.ts
    LocalStorageActions.ts
  hooks/
    useDeviceType.ts
    useFocusOnActiveNote.ts
    useFocusOnTextarea.ts
    useFocusOnTitle.ts
    useHighLightText.ts
    useToggleOverlay.ts
    useToggleSidebar.ts
  store/
    notesStore.ts
    themeStore.ts
  App.vue
  main.ts
.eslintrc.cjs
.gitignore
.prettierrc.json
CODE_OF_CONDUCT.md
CONTRIBUTING.md
env.d.ts
index.html
LICENSE
package.json
readme.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .github/ISSUE_TEMPLATE/feature_request.md
================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

================
File: public/favicon/browserconfig.xml
================
<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square150x150logo src="/mstile-150x150.png"/>
            <TileColor>#da532c</TileColor>
        </tile>
    </msapplication>
</browserconfig>

================
File: public/favicon/safari-pinned-tab.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="700.000000pt" height="700.000000pt" viewBox="0 0 700.000000 700.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.14, written by Peter Selinger 2001-2017
</metadata>
<g transform="translate(0.000000,700.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M3015 6554 c-241 -29 -458 -79 -660 -151 -416 -151 -774 -391 -1042
-701 -32 -37 -60 -69 -63 -72 -12 -12 -90 -122 -135 -190 -54 -82 -138 -243
-173 -330 -27 -68 -54 -145 -49 -139 3 2 42 51 88 109 158 199 415 439 634
592 251 175 560 317 855 393 3 1 25 5 50 10 25 5 47 9 50 10 19 4 156 27 210
34 68 9 427 7 493 -4 21 -3 73 -13 115 -21 42 -8 88 -17 102 -20 109 -22 395
-139 515 -212 326 -196 584 -477 754 -820 110 -222 175 -426 220 -697 35 -213
36 -600 1 -805 -5 -30 -11 -72 -14 -92 -3 -20 -15 -79 -26 -130 -97 -434 -288
-845 -562 -1209 -116 -154 -137 -178 -288 -330 -260 -261 -562 -470 -878 -605
-23 -10 -39 -21 -34 -26 9 -9 261 -72 372 -92 217 -40 338 -50 585 -51 212 0
380 10 475 30 14 2 41 7 60 10 19 3 58 10 85 15 28 6 59 12 70 14 279 54 661
218 915 394 342 235 615 552 788 912 77 162 165 424 186 560 3 19 8 44 10 56
6 29 16 114 26 204 7 73 4 421 -4 470 -2 14 -7 48 -10 75 -6 47 -9 65 -21 125
-2 14 -7 41 -10 60 -38 233 -174 596 -323 863 -41 76 -196 317 -227 355 -266
330 -438 503 -690 693 -55 42 -127 93 -160 115 -33 21 -62 41 -65 44 -17 20
-241 144 -385 215 -280 138 -605 247 -885 298 -90 17 -137 24 -206 32 -33 4
-70 9 -84 12 -62 13 -549 10 -665 -3z"/>
<path d="M2859 5886 c-2 -2 -38 -7 -79 -11 -311 -27 -713 -169 -1027 -360
-336 -206 -606 -451 -887 -805 -32 -41 -148 -215 -193 -290 -212 -356 -361
-773 -409 -1145 -3 -27 -8 -59 -11 -70 -13 -51 -10 -465 3 -565 48 -355 169
-673 347 -909 55 -73 147 -175 152 -169 2 2 -11 36 -30 75 -121 257 -197 546
-231 868 -7 74 -8 326 0 418 51 625 359 1182 821 1483 181 118 351 184 585
229 39 8 189 19 255 19 375 1 776 -152 1112 -423 76 -60 235 -216 291 -284
297 -361 487 -783 558 -1241 3 -21 8 -48 10 -60 9 -42 18 -204 18 -318 1 -94
3 -114 14 -106 7 6 58 79 113 162 214 322 383 722 454 1071 8 39 17 81 20 95
39 178 50 613 20 770 -3 13 -7 42 -10 65 -4 22 -15 78 -26 125 -145 623 -541
1082 -1100 1278 -83 29 -269 74 -359 87 -51 7 -405 16 -411 11z"/>
<path d="M2030 4417 c-3 -3 -34 -7 -70 -11 -124 -11 -312 -67 -445 -131 -61
-29 -185 -103 -220 -132 -174 -140 -276 -255 -377 -423 -109 -182 -204 -444
-233 -645 -3 -23 -8 -52 -10 -65 -10 -49 -18 -188 -18 -305 -1 -110 10 -302
18 -315 1 -3 5 -28 9 -57 11 -93 64 -317 93 -393 3 -8 7 -19 9 -25 11 -48 77
-204 130 -311 188 -382 480 -712 814 -918 371 -230 779 -311 1165 -231 128 27
285 87 396 152 63 36 195 133 249 183 l35 31 -45 -26 c-128 -74 -354 -172
-436 -190 -10 -2 -50 -10 -89 -19 -70 -15 -299 -17 -355 -2 -14 3 -37 8 -52
11 -45 8 -169 55 -240 91 -198 100 -489 350 -622 537 -90 126 -169 317 -195
472 -25 149 -30 271 -18 420 11 127 17 162 48 294 198 818 869 1476 1588 1555
68 8 70 3 -39 97 -193 167 -467 297 -705 335 -20 3 -47 8 -59 10 -28 7 -321
16 -326 11z"/>
</g>
</svg>

================
File: public/favicon/site.webmanifest
================
{
    "name": "V-Notes",
    "short_name": "V-Notes",
    "icons": [
        {
            "src": "/android-chrome-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "/android-chrome-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ],
    "theme_color": "#ffffff",
    "background_color": "#000000",
    "display": "standalone"
}

================
File: public/robots.txt
================
User-agent: *
Disallow:

================
File: src/assets/styles/themes/dark.css
================
:root {
    --dark-primary: #24292e;
    --dark-primary-hover: #24292e99;

    --dark-second: #363e45;

    --dark-accent: #0d74e7;
    --dark-accent-hover: #0d73e7af;

    --dark-light: #fafbfc;
    --dark-overlay: rgba(0, 0, 0, 0.5);
}

[data-color-theme='dark'] {
    --bg-base: var(--dark-primary);
    --bg-base-hover: var(--dark-primary-hover);

    --bg-second: var(--dark-second);

    --color-text: var(--dark-light);
    --color-accent: var(--dark-accent);
    --color-overlay: var(--dark-overlay);
}

================
File: src/assets/styles/themes/light.css
================
:root {
    --light-primary: #f9f7f7;
    --light-primary-hover: rgb(249, 247, 247, 0.6);
    --light-second: #dbe2ef;
    --light-accent: #3f72af;
    --light-dark: #112d4e;
    --light-overlay: rgba(255, 255, 255, 0.5);
}

[data-color-theme='light'] {
    --bg-base: var(--light-primary);
    --bg-base-hover: var(--light-primary-hover);

    --bg-second: var(--light-second);

    --color-text: var(--light-dark);
    --color-accent: var(--light-accent);
    --color-overlay: var(--light-overlay);
}

================
File: src/assets/styles/fonts.css
================
@font-face {
    font-family: 'K2D';
    src:
        url('@/assets/fonts/k2d/k2d.woff2') format('woff2'),
        url('@/assets/fonts/k2d/k2d.woff') format('woff');
    font-display: swap;
}

@font-face {
    font-family: 'Roboto';
    src:
        url('@/assets/fonts/roboto/roboto-regular.woff2') format('woff2'),
        url('@/assets/fonts/roboto/roboto-regular.woff') format('woff');
    font-display: swap;
    font-weight: 400;
}

@font-face {
    font-family: 'Roboto';
    src:
        url('@/assets/fonts/roboto/roboto-bold.woff2') format('woff2'),
        url('@/assets/fonts/roboto/roboto-bold.woff') format('woff');
    font-display: swap;
    font-weight: 700;
}

================
File: src/assets/styles/main.css
================
@import './fonts.css';
@import './themes/dark';
@import './themes/light';
@import './reset';
@import './vars';

* {
    box-sizing: border-box;
    -webkit-tap-highlight-color: transparent;
}

body {
    font-family: var(--font-base);
    margin: 0;
    height: 98vh;

    background-color: var(--bg-base);
    transition: background-color var(--transition-short) ease-in-out;

    overflow: hidden;
    position: relative;
}

body::after {
    content: '';
    pointer-events: none;

    position: absolute;
    top: 0;
    right: 0;
    bottom: -100px;
    left: 0;

    z-index: 2;

    background-color: rgba(0, 0, 0, 0);
    transition: background-color var(--transition-short) ease-in-out;
}

body[data-overlay='true']::after {
    background-color: var(--color-overlay);
}

@supports (height: calc(98dvh)) {
    body {
        height: calc(98dvh);
    }
}

#app {
    height: inherit;
    display: flex;
    flex-direction: column;
    width: 100%;
}

.no-transition {
    transition: none;
}

[disabled] {
    cursor: not-allowed;
    opacity: 0.7;
}

================
File: src/assets/styles/reset.css
================
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center, 
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}

button {
    background-color: transparent;
    border: none;
}

ol, ul {
	list-style: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

================
File: src/assets/styles/vars.css
================
:root {
    --container-width: 1240px;

    --gap-base: 18px;
    --gap-small: 6px;

    --offset-base: 12px;
    --offset-small: 8px;

    --b-radius-base: 6px;

    --font-size-text: 16px;
    --font-size-sidebar: 18px;
    --font-size-title: 24px;

    --transition-short: 0.4s;
    --transition-base: 0.5s;

    --side-bar-width: 300px;

    --font-base: 'Roboto';
}

:root {
    @media (max-width: 1024px) {
        --side-bar-width: 240px;
    }
}

:root {
    @media (max-width: 768px) {
        --gap-base: 12px;
        --offset-base: 8px;
        --b-radius-base: 4px;

        --font-size-text: 14px;
        --font-size-sidebar: 16px;
        --font-size-title: 18px;

        --side-bar-width: 100%;
    }
}

:root {
    @media (max-height: 500px) and (orientation: landscape) {
        --gap-base: 6px;
        --offset-small: 4px;
    }
}

================
File: src/components/common/TheColorThemeToggle.vue
================
<script setup lang="ts">
import IconMoon from '@/components/icons/IconMoon.vue'
import IconSun from '@/components/icons/IconSun.vue'
import { useThemeStore } from '@/store/themeStore'
import { onBeforeUnmount, onMounted } from 'vue'

const themeStore = useThemeStore()

function handleKeyDown(event: KeyboardEvent) {
    if (event.ctrlKey && event.key === 'c') {
        event.preventDefault()
        themeStore.toggleColorTheme()
    }
}

onMounted(() => {
    window.addEventListener('keydown', handleKeyDown)
})

onBeforeUnmount(() => {
    window.removeEventListener('keydown', handleKeyDown)
})
</script>

<template>
    <div class="theme">
        <input
            @click="themeStore.toggleColorTheme()"
            :checked="themeStore.activeTheme === 'dark'"
            class="theme__input"
            type="checkbox"
            name="current-theme"
            aria-label="toggle color theme"
            id="color-theme"
        />
        <label class="theme__label" for="color-theme"></label>
        <div class="theme__icon">
            <IconSun :class="'theme__icon--sun'"></IconSun>
            <IconMoon :class="'theme__icon--moon'"></IconMoon>
        </div>
    </div>
</template>

<style lang="scss" scoped>
.theme {
    position: relative;

    width: 40px;
    height: 23px;
    border-radius: 11px;

    background-color: var(--bg-base);

    transition: background-color var(--transition-short) ease-in-out;

    &__label {
        cursor: pointer;

        position: absolute;
        top: 0;
        left: 0;

        display: block;

        width: inherit;
        height: inherit;
        border-radius: 11px;
    }

    &__input {
        appearance: none;
        width: 0;
        &:checked ~ .theme__icon {
            background-color: var(--dark-light);
            transform: translate(20%, -50%);
        }

        &:checked ~ .theme__icon .theme__icon--sun {
            opacity: 0;
        }

        &:checked ~ .theme__icon .theme__icon--moon {
            opacity: 1;
        }

        &:focus-visible ~ .theme__label {
            outline: 2px solid var(--color-accent);
            border-radius: 11px;
        }
    }

    &__icon {
        pointer-events: none;

        position: absolute;
        top: 50%;
        transform: translate(103%, -50%);

        width: 18px;
        height: 18px;
        border-radius: 50%;

        background-color: var(--bg-second);

        transition-property: background-color, transform, opacity;
        transition-timing-function: ease-in-out;
        transition-duration: var(--transition-short);
    }

    &__svg {
        position: absolute;
        top: 50%;
        left: 50%;

        width: 12px;

        transform: translate(-50%, -50%);
        transition: opacity var(--transition-short) ease-in-out;
    }

    &__icon--moon {
        opacity: 0;
    }
}
</style>

================
File: src/components/common/TheGitHubLink.vue
================
<script setup lang="ts">
import IconGitHubLogo from '../icons/IconGitHubLogo.vue'
</script>

<template>
    <a
        class="github-link"
        href="https://github.com/Alexander-Shulginov/V-Notes"
        target="_blank"
        title="GitHub"
    >
        <IconGitHubLogo />
    </a>
</template>

<style lang="scss" scoped>
.github-link {
    display: flex;
    align-items: center;
    justify-content: center;
    &:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 3px;
        border-radius: 50%;
    }
}
</style>

================
File: src/components/common/TheHeader.vue
================
<script setup lang="ts">
import TheMainLogo from '@/components/common/TheMainLogo.vue'
import TheColorThemeToggle from '@/components/common/TheColorThemeToggle.vue'
import TheGitHubLink from './TheGitHubLink.vue'
import TheHeaderMenu from './TheHeaderMenu.vue'
import { useStore } from '@/store/notesStore'
const store = useStore()


</script>

<template>
    <header class="header" :inert="store.modalIsOpen">
        <div class="header__container">
            <TheMainLogo v-once />
            <TheColorThemeToggle v-once/>
            <TheGitHubLink v-once />
            <TheHeaderMenu />
        </div>
    </header>
</template>

<style lang="scss" scoped>
.header {
    margin-bottom: var(--gap-base);

    text-align: center;
    text-transform: uppercase;

    background-color: var(--bg-second);

    transition: background-color var(--transition-short) ease-in-out;

    &__container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: var(--gap-base);

        margin: 0 auto;
        padding: 10px var(--offset-base);
        max-width: var(--container-width);

        @media (max-height: 500px) and (orientation: landscape) {
            padding: 4px var(--offset-base);
        }
    }
}
</style>

================
File: src/components/common/TheHeaderMenu.vue
================
<script setup lang="ts">
import { useToggleOverlay } from '@/hooks/useToggleOverlay'
import IconDots from '../icons/IconDots.vue'
import { useStore } from '@/store/notesStore'
import { onBeforeUnmount, onMounted } from 'vue'
const store = useStore()
const { showOverlay, hideOverlay } = useToggleOverlay()

const showModal = () => {
    store.modalIsOpen = true
    showOverlay()
}

const toggleModal = () => {
    store.modalIsOpen = !store.modalIsOpen
    store.modalIsOpen ? showOverlay() : hideOverlay()
}

const toggleMenuModal = (event: KeyboardEvent) => {
    if (event.ctrlKey && event.key === 'm') {
        toggleModal()
    }
}

onMounted(() => {
    window.addEventListener('keyup', toggleMenuModal)
})

onBeforeUnmount(() => {
    window.removeEventListener('keyup', toggleMenuModal)
})
</script>

<template>
    <button @click="showModal" class="menu-btn">
        <IconDots />
    </button>
</template>

<style scoped lang="scss">
.menu-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    background-color: transparent;
    border: none;
    padding: 0;

    &:focus-visible {
        outline: 2px solid var(--color-accent);
        border-radius: 4px;
    }

    @media (any-hover: hover) {
        &:hover {
            svg {
                opacity: 0.8;
            }
        }
    }
}
</style>

================
File: src/components/common/TheMainLogo.vue
================
<template>
    <div class="logo">
        <svg class="logo__svg" width="32px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
            <path
                d="M29.47 21.827c3.371-5.839 0.556-13.776-6.243-17.701s-15.043-2.374-18.414 3.465c-0.326 0.564-0.551 1.149-0.764 1.747 3.574-4.909 9.64-6.806 14.176-4.187 4.918 2.84 6.156 9.875 2.771 15.738-1.613 2.794-3.985 4.806-6.561 5.848 5.952 1.826 12.211-0.019 15.035-4.911v0zM20.401 8.497c-2.954-4.433-9.359-4.573-14.273-0.339s-6.503 11.26-3.549 15.693c0.286 0.429 0.618 0.783 0.963 1.132-2.244-4.316-1.598-9.712 1.681-12.537 3.555-3.063 8.826-1.938 11.792 2.514 1.414 2.122 2.041 4.612 1.93 6.975 3.187-4.189 3.931-9.724 1.457-13.438l-0 0zM5.244 13.646c-3.048 3.029-2.986 8.872 0.071 12.85s8.007 4.747 11.055 1.717c-2.939 1.85-5.296 1.641-8.036-1.305-2.462-2.648-1.525-7.663 1.536-10.705 1.459-1.45 3.19-2.235 4.847-2.352-2.599-2.666-6.92-2.744-9.474-0.206z"
            ></path>
        </svg>

        <span class="slogan">V-Notes</span>
    </div>
</template>

<style lang="scss" scoped>
.logo {
    display: flex;
    align-items: center;
    gap: 4px;

    margin-right: auto;

    text-decoration: none;
    outline: none;

    @media (any-hover: hover) {
        &:hover {
            .slogan::after {
                width: 100%;
            }
        }
    }

    &:focus-visible {
        .slogan::after {
            width: 100%;
        }
    }

    &__svg {
        fill: var(--color-text);
        transition: fill var(--transition-short) ease-in-out;

        @media (max-height: 500px) and (orientation: landscape) {
            width: 26px;
        }

        @media (max-width: 768px) {
            width: 28px;
        }
    }
}

.slogan {
    display: block;
    margin-top: 4px;

    font-family: 'K2D';
    font-size: 21px;
    color: var(--color-text);

    transition: color var(--transition-short) ease-in-out;

    position: relative;

    @media (max-height: 500px) and (orientation: landscape) {
        font-size: 16px;
    }

    @media (max-width: 768px) {
        font-size: 18px;
    }

    &::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;

        width: 0;
        height: 2px;
        border-radius: 2px;

        background-color: var(--color-accent);

        transition: width var(--transition-base) ease-in-out;
    }
}
</style>

================
File: src/components/icons/IconClose.vue
================
<template>
    <svg
        class="icon-close"
        viewBox="0 0 512 512"
        width="18px"
        height="18px"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path
            d="M437.5,386.6L306.9,256l130.6-130.6c14.1-14.1,14.1-36.8,0-50.9c-14.1-14.1-36.8-14.1-50.9,0L256,205.1L125.4,74.5  c-14.1-14.1-36.8-14.1-50.9,0c-14.1,14.1-14.1,36.8,0,50.9L205.1,256L74.5,386.6c-14.1,14.1-14.1,36.8,0,50.9  c14.1,14.1,36.8,14.1,50.9,0L256,306.9l130.6,130.6c14.1,14.1,36.8,14.1,50.9,0C451.5,423.4,451.5,400.6,437.5,386.6z"
        />
    </svg>
</template>

<style scoped>
.icon-close {
    fill: var(--color-text);
    stroke-width: 2px;
    stroke-linecap: round;

    transition:
        opacity var(--transition-base) ease-in-out,
        fill var(--transition-base) ease-in-out;
}
</style>

================
File: src/components/icons/IconDots.vue
================
<template>
    <svg
        class="icon-dots"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        focusable="false"
        viewBox="0 0 24 24"
    >
        <circle cx="12" cy="3" r="2"></circle>
        <circle cx="12" cy="12" r="2"></circle>
        <circle cx="12" cy="21" r="2"></circle>
    </svg>
</template>

<style scoped lang="scss">
.icon-dots {
    width: 22px;
    height: 22px;
    fill: var(--color-text);
    transition:
        fill var(--transition-short) ease-in-out,
        opacity var(--transition-short) ease-in-out;
}
</style>

================
File: src/components/icons/IconFolderEmpty.vue
================
<template>
    <svg
        class="svg-empty-folder"
        width="72"
        height="52"
        viewBox="0 0 72 52"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path
            opacity="0.902"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M71.8594 15.1719C71.8594 16.2031 71.8594 17.2344 71.8594 18.2656C69.4336 28.6277 67.043 39.034 64.6875 49.4844C64.2535 50.0126 63.738 50.4344 63.1406 50.75C52.5634 51.0757 41.9695 51.2163 31.3594 51.1719C21.0469 51.1249 10.7344 51.0782 0.421875 51.0313C0.268818 50.8296 0.0813178 50.689 -0.140625 50.6094C-0.140625 50.0469 -0.140625 49.4844 -0.140625 48.9219C1.34213 48.6688 2.84212 48.5751 4.35938 48.6406C4.31249 33.4529 4.35938 18.2654 4.5 3.07813C4.94947 1.78478 5.84007 0.98791 7.17188 0.687507C15.2344 0.499998 23.2969 0.499998 31.3594 0.687507C33.3709 1.29394 34.4489 2.65333 34.5938 4.76563C34.8047 4.94164 35.0392 5.08226 35.2969 5.18751C44.5781 5.28125 53.8594 5.37502 63.1406 5.46876C63.9768 5.96511 64.5862 6.66823 64.9688 7.57813C65.1094 9.45078 65.1561 11.3258 65.1094 13.2031C66.6124 13.1564 68.1123 13.2033 69.6094 13.3438C70.5454 13.7596 71.2952 14.369 71.8594 15.1719ZM7.73438 3.07813C15.4225 3.03128 23.1099 3.07813 30.7969 3.21876C31.0545 3.324 31.2891 3.46463 31.5 3.64063C31.68 5.88144 32.8517 7.2408 35.0156 7.71876C44.0156 7.8125 53.0156 7.90627 62.0156 8.00001C62.1562 8.14063 62.2969 8.28126 62.4375 8.42188C62.5778 10.0129 62.6248 11.6066 62.5781 13.2031C46.0617 13.0658 29.5616 13.2065 13.0781 13.625C12.0472 14.0941 11.4378 14.891 11.25 16.0156C9.84375 22.3907 8.4375 28.7655 7.03125 35.1406C6.84374 24.6407 6.84374 14.1406 7.03125 3.64063C7.31101 3.48147 7.54538 3.29396 7.73438 3.07813ZM14.2031 15.7344C32.391 15.6875 50.5783 15.7344 68.7656 15.875C69.1577 16.1439 69.3453 16.5189 69.3281 17C67.1006 27.5795 64.663 38.0797 62.0156 48.5C43.828 48.6876 25.6406 48.6876 7.45312 48.5C7.08623 48.2739 6.89872 47.9457 6.89062 47.5156C9.1996 36.8748 11.6371 26.281 14.2031 15.7344Z"
        />
        <path
            opacity="0.872"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M31.9219 24.7345C35.0322 24.6091 35.9696 25.9686 34.7344 28.8126C32.148 30.0476 30.7884 29.2505 30.6562 26.422C30.8824 25.6778 31.3042 25.1153 31.9219 24.7345Z"
        />
        <path
            opacity="0.872"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M49.0781 24.7345C52.1885 24.6091 53.1259 25.9686 51.8906 28.8126C49.3042 30.0476 47.9447 29.2505 47.8125 26.422C48.0386 25.6778 48.4605 25.1153 49.0781 24.7345Z"
        />
        <path
            opacity="0.855"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M40.6406 33.7344C42.7331 33.7735 44.7019 34.289 46.5469 35.2812C47.2635 35.8218 47.826 36.478 48.2344 37.25C47.9334 38.4329 47.1833 38.8078 45.9844 38.375C44.5922 36.9941 42.9047 36.3849 40.9219 36.5469C38.9779 36.4603 37.2904 37.0697 35.8594 38.375C34.7321 38.7733 34.076 38.3981 33.8906 37.25C33.9308 36.645 34.2121 36.1762 34.7344 35.8438C36.5352 34.5762 38.504 33.873 40.6406 33.7344Z"
        />
    </svg>
</template>

<style lang="scss" scoped>
.svg-empty-folder {
    fill: var(--color-accent);
    transition: fill var(--transition-base) ease-in-out;
}

[data-color-theme='dark'] .svg-empty-folder {
    fill: var(--color-text);
}
</style>

================
File: src/components/icons/IconGitHubLogo.vue
================
<template>
    <svg
        class="github-logo"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        focusable="false"
        viewBox="0 0 24 24"
        width="20px"
        height="20px"
    >
        <path
            d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
        ></path>
    </svg>
</template>

<style lang="scss">
.github-logo {
    fill: var(--color-text);
    transition: fill var(--transition-short) ease-in-out;
}
</style>

================
File: src/components/icons/IconLayoutsLeft.vue
================
<template>
    <svg
        class="icon-layouts-left"
        width="137"
        height="79"
        viewBox="0 0 60 35"
        xmlns="http://www.w3.org/2000/svg"
    >
        <rect x="15" y="8.75" width="45" height="26.25" rx="1" />
        <rect y="8.75" width="12.5" height="26.25" rx="1" />
        <rect width="12.5" height="6.5625" rx="1" />
        <rect x="15" width="45" height="6.5625" rx="1" />
    </svg>
</template>

<style scoped lang="scss">
.icon-layouts-left {
    fill: var(--color-accent);
    transition: fill var(--transition-base)  ease-in-out;
}
</style>

================
File: src/components/icons/IconLayoutsRight.vue
================
<template>
    <svg
        class="icon-layouts-right"
        width="137"
        height="79"
        viewBox="0 0 60 35"
        xmlns="http://www.w3.org/2000/svg"
    >
        <rect y="8.75" width="45" height="26.25" rx="1" />
        <rect x="47.5" y="8.75" width="12.5" height="26.25" rx="1" />
        <rect x="47.5" width="12.5" height="6.5625" rx="1" />
        <rect width="45" height="6.5625" rx="1" />
    </svg>
</template>

<style scoped lang="scss">
.icon-layouts-right {
    fill: var(--color-accent);
    transition: fill var(--transition-base) ease-in-out;
}
</style>

================
File: src/components/icons/IconMoon.vue
================
<template>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        focusable="false"
        viewBox="0 0 24 24"
        class="theme__svg"
    >
        <path
            d="M12.1,22c-0.3,0-0.6,0-0.9,0c-5.5-0.5-9.5-5.4-9-10.9c0.4-4.8,4.2-8.6,9-9c0.4,0,0.8,0.2,1,0.5c0.2,0.3,0.2,0.8-0.1,1.1c-2,2.7-1.4,6.4,1.3,8.4c2.1,1.6,5,1.6,7.1,0c0.3-0.2,0.7-0.3,1.1-0.1c0.3,0.2,0.5,0.6,0.5,1c-0.2,2.7-1.5,5.1-3.6,6.8C16.6,21.2,14.4,22,12.1,22zM9.3,4.4c-2.9,1-5,3.6-5.2,6.8c-0.4,4.4,2.8,8.3,7.2,8.7c2.1,0.2,4.2-0.4,5.8-1.8c1.1-0.9,1.9-2.1,2.4-3.4c-2.5,0.9-5.3,0.5-7.5-1.1C9.2,11.4,8.1,7.7,9.3,4.4z"
        ></path>
    </svg>
</template>

================
File: src/components/icons/IconPlus.vue
================
<template>
    <svg
        class="svg--plus"
        xmlns="http://www.w3.org/2000/svg"
        width="22px"
        height="22px"
        viewBox="0 0 1024 1024"
    >
        <path d="M352 480h320a32 32 0 1 1 0 64H352a32 32 0 0 1 0-64"></path>
        <path d="M480 672V352a32 32 0 1 1 64 0v320a32 32 0 0 1-64 0"></path>
        <path
            d="M512 896a384 384 0 1 0 0-768a384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896a448 448 0 0 1 0 896"
        ></path>
    </svg>
</template>

<style lang="scss" scoped>
.svg--plus {
    fill: var(--color-text);
    transition:
        transform var(--transition-base) ease-in-out,
        fill var(--transition-short) ease-in-out;
}
</style>

================
File: src/components/icons/IconSidebar.vue
================
<template>
    <svg
        width="23"
        height="20"
        viewBox="0 0 21 18"
        class="svg-sidebar"
        xmlns="http://www.w3.org/2000/svg"
    >
        <rect x="1" y="1" width="19" height="16" rx="1" stroke="white" stroke-width="2" />
        <line
            class="svg-line"
            x1="8"
            y1="0.666504"
            x2="8"
            y2="17.3332"
            stroke="white"
            stroke-width="2"
        />
        <line class="svg-dots" x1="3" y1="5" x2="6" y2="5" stroke="white" stroke-width="2" />
        <line class="svg-dots" x1="3" y1="9" x2="6" y2="9" stroke="white" stroke-width="2" />
        <line class="svg-dots" x1="3" y1="13" x2="6" y2="13" stroke="white" stroke-width="2" />
        <path
            class="svg-arrow"
            d="M12.0908 8.31344C11.8955 8.5087 11.8955 8.82528 12.0908 9.02055L15.2728 12.2025C15.468 12.3978 15.7846 12.3978 15.9799 12.2025C16.1751 12.0073 16.1751 11.6907 15.9799 11.4954L13.1514 8.66699L15.9799 5.83857C16.1751 5.6433 16.1751 5.32672 15.9799 5.13146C15.7846 4.9362 15.468 4.9362 15.2728 5.13146L12.0908 8.31344ZM12.4443 9.16699H12.4444V8.16699H12.4443V9.16699Z"
            fill="white"
        />
    </svg>
</template>

<style scoped lang="scss">
.svg-sidebar {
    fill: var(--bg-base);
    transition: fill var(--transition-short) ease-in-out;
    rect,
    line,
    path {
        stroke: var(--color-text);
    }

    rect {
        transition: stroke var(--transition-short) ease-in-out;
    }

    @media (max-height: 500px) and (orientation: landscape) {
        width: 14px;
        height: 14px;
    }
}

.svg-dots {
    transition:
        opacity var(--transition-base) ease-in-out,
        stroke var(--transition-short) ease-in-out;
}

.svg-line {
    transition:
        transform var(--transition-base) ease-in-out,
        stroke var(--transition-short) ease-in-out;
}

.svg-arrow {
    transform: translateX(0px);
    transform-origin: center center;
    transition:
        transform var(--transition-base) ease-in-out,
        stroke var(--transition-short) ease-in-out;
}
</style>

================
File: src/components/icons/IconSun.vue
================
<template>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        focusable="false"
        viewBox="0 0 24 24"
        class="theme__svg"
    >
        <path
            d="M12,18c-3.3,0-6-2.7-6-6s2.7-6,6-6s6,2.7,6,6S15.3,18,12,18zM12,8c-2.2,0-4,1.8-4,4c0,2.2,1.8,4,4,4c2.2,0,4-1.8,4-4C16,9.8,14.2,8,12,8z"
        ></path>
        <path d="M12,4c-0.6,0-1-0.4-1-1V1c0-0.6,0.4-1,1-1s1,0.4,1,1v2C13,3.6,12.6,4,12,4z"></path>
        <path
            d="M12,24c-0.6,0-1-0.4-1-1v-2c0-0.6,0.4-1,1-1s1,0.4,1,1v2C13,23.6,12.6,24,12,24z"
        ></path>
        <path
            d="M5.6,6.6c-0.3,0-0.5-0.1-0.7-0.3L3.5,4.9c-0.4-0.4-0.4-1,0-1.4s1-0.4,1.4,0l1.4,1.4c0.4,0.4,0.4,1,0,1.4C6.2,6.5,5.9,6.6,5.6,6.6z"
        ></path>
        <path
            d="M19.8,20.8c-0.3,0-0.5-0.1-0.7-0.3l-1.4-1.4c-0.4-0.4-0.4-1,0-1.4s1-0.4,1.4,0l1.4,1.4c0.4,0.4,0.4,1,0,1.4C20.3,20.7,20,20.8,19.8,20.8z"
        ></path>
        <path d="M3,13H1c-0.6,0-1-0.4-1-1s0.4-1,1-1h2c0.6,0,1,0.4,1,1S3.6,13,3,13z"></path>
        <path d="M23,13h-2c-0.6,0-1-0.4-1-1s0.4-1,1-1h2c0.6,0,1,0.4,1,1S23.6,13,23,13z"></path>
        <path
            d="M4.2,20.8c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l1.4-1.4c0.4-0.4,1-0.4,1.4,0s0.4,1,0,1.4l-1.4,1.4C4.7,20.7,4.5,20.8,4.2,20.8z"
        ></path>
        <path
            d="M18.4,6.6c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l1.4-1.4c0.4-0.4,1-0.4,1.4,0s0.4,1,0,1.4l-1.4,1.4C18.9,6.5,18.6,6.6,18.4,6.6z"
        ></path>
    </svg>
</template>

================
File: src/components/icons/IconTrash.vue
================
<template>
    <svg
        class="svg--trash"
        width="16"
        height="17"
        viewBox="0 0 16 17"
        stroke-width="1.5px"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path
            d="M3 4V15C3 15.5523 3.44772 16 4 16H8H12C12.5523 16 13 15.5523 13 15V4"
            stroke-linecap="round"
        />
        <path d="M6.5 8V12" stroke-linecap="round" />
        <path
            class="svg--trash-top"
            d="M4.5 3.5V2C4.5 1.44772 4.94772 1 5.5 1H8H10.5C11.0523 1 11.5 1.44772 11.5 2V3.5M4.5 3.5H0.5M4.5 3.5H11.5M11.5 3.5H15.5"
            stroke-linecap="round"
        />
        <path d="M9.5 8V12" stroke-linecap="round" />
    </svg>
</template>

<style lang="scss" scoped>
.svg--trash {
    overflow: visible;

    path {
        stroke: var(--color-text);
        fill: transparent;
        transition: var(--transition-short) ease-in-out;
    }
}
.svg--trash-top {
    transform: translateY(-0.5px);
    transition: var(--transition-base) ease-in-out;
}
</style>

================
File: src/components/settings/SettingsBody.vue
================
<script setup lang="ts">
import { ref } from 'vue'
import SettingsBodyColors from './SettingsBodyColors.vue'
import SettingsBodyLayouts from './SettingsBodyLayouts.vue'
import SettingsBodyHotKeys from './SettingsBodyHotKeys.vue'
import SettingsBodyAbout from './SettingsBodyAbout.vue'

const tabsNav = [
    // {
    //     tabName: 'Colors',
    //     tabId: 'colors'
    // },
    {
        tabName: 'Hot keys',
        tabId: 'hotkeys'
    },
    {
        tabName: 'Layouts',
        tabId: 'layouts'
    },
    {
        tabName: 'About',
        tabId: 'about'
    }
]

const activeTab = ref('hotkeys')

const changeTab = (tabId: string) => {
    activeTab.value = tabId
}
</script>

<template>
    <div class="tabs">
        <div class="tabs__inner">
            <div class="tabs__nav">
                <button
                    v-for="tab in tabsNav"
                    :key="tab.tabId"
                    :name="tab.tabId"
                    :class="{ 'tabs__btn--active': activeTab === tab.tabId }"
                    @click="changeTab(tab.tabId)"
                    class="tabs__btn"
                    type="button"
                >
                    {{ tab.tabName }}
                </button>
            </div>
            <div class="tabs__content">
                <!-- <SettingsBodyColors v-show="activeTab === 'colors'" class="tabs__item" /> -->
                <SettingsBodyLayouts v-show="activeTab === 'layouts'" class="tabs__item" />
                <SettingsBodyHotKeys v-show="activeTab === 'hotkeys'" class="tabs__item" />
                <SettingsBodyAbout v-show="activeTab === 'about'" class="tabs__item" />
            </div>
        </div>
    </div>
</template>

<style lang="scss" scoped>
.tabs {
    &__inner {
        display: flex;
        flex-direction: column;
        gap: var(--gap-base);
        height: 100%;

        @media (max-width: 768px){
            gap: 22px;
        }
    }

    &__nav {
        display: flex;
        flex-shrink: 0;
        gap: var(--gap-small);
    }

    &__btn {
        cursor: pointer;

        width: 100%;

        background-color: transparent;
        border: none;

        font-size: var(--font-size-text);
        color: var(--color-text);
        padding: var(--offset-base);

        list-style-type: none;

        border-radius: var(--b-radius-base);
        transition: color var(--transition-short) ease-in-out;

        @media (any-hover: hover) {
            &:hover {
                background-color: var(--bg-base);
            }
        }

        &:focus-visible {
            outline: 2px solid var(--color-accent);
            outline-offset: 1px;
        }
    }

    &__btn--active {
        background-color: var(--color-accent);
        transition: background-color var(--transition-short) ease-in-out;

        @media (any-hover: hover) {
            &:hover {
                background-color: var(--color-accent);
            }
        }
    }

    &__item {
        padding-top: 0;
        color: var(--color-text);
        transition: color var(--transition-short) ease-in-out;
    }
}

[data-color-theme='light'] .tabs__btn--active {
    color: var(--bg-base);
}
</style>

================
File: src/components/settings/SettingsBodyAbout.vue
================
<script setup lang="ts">
import TheMainLogo from '../common/TheMainLogo.vue'

const version = import.meta.env.VITE_APP_VERSION
</script>
<template>
    <div class="settings-about">
        <TheMainLogo />
        <p>Is a simple application for creating and managing notes.</p>
        <p>License: MIT</p>
        <p>Version: {{ version }}</p>
        <p>
            <span class="settings-about__contacts"> Contacts: </span>
            <span>
                <a class="settings-about__link" href="mailto:alexander3post@gmail.com"
                    >alexander3post@gmail.com</a
                >
                <a
                    class="settings-about__link"
                    href="https://github.com/Alexander-Shulginov"
                    target="_blank"
                    title="GitHub"
                >
                    https://github.com/Alexander-Shulginov
                </a>
            </span>
        </p>
    </div>
</template>

<style scoped lang="scss">
.settings-about {
    display: flex;
    flex-direction: column;
    gap: var(--gap-base);

    &__contacts {
        display: inline-block;
        margin-bottom: var(--gap-small);
    }

    &__link {
        color: inherit;
        margin-bottom: 6px;
        display: block;
        &:focus-visible {
            outline: 2px solid var(--color-accent);
            outline-offset: 1px;
        }
    }

    .logo {
        margin: 0 auto;
    }
}
</style>

================
File: src/components/settings/SettingsBodyColors.vue
================
<script setup lang="ts">
import { onMounted, watch } from 'vue'
import AppControlsBtn from '../AppControlsBtn.vue'
import { useThemeStore } from '@/store/themeStore'
const themeStore = useThemeStore()

enum ColorType {
    base = '--bg-base',
    text = '--color-text',
    second = '--bg-second',
    accent = '--color-accent'
}

const getColor = (colorName: string): string => {
    return getComputedStyle(document.body).getPropertyValue(colorName)
}

const setColor = (event: Event, colorType: string) => {
    const eventTarget = event.target as HTMLInputElement
    if (!eventTarget) return
    document.body.style.setProperty(colorType, eventTarget.value)
}

const currentColorsPallet = {
    text: getColor(ColorType.text),
    base: getColor(ColorType.base),
    second: getColor(ColorType.second),
    accent: getColor(ColorType.accent)
}

watch(
    () => themeStore.activeTheme,
    () => {
        console.log(getColor(ColorType.text))
    }
)

const colorsPallet = () => {
    return {
        text: getColor(ColorType.text),
        base: getColor(ColorType.base),
        second: getColor(ColorType.second),
        accent: getColor(ColorType.accent)
    }
}

onMounted(() => {
    colorsPallet()
})
</script>

<template>
    <div class="colortheme">
        <h4 class="colortheme__title">Custom color theme</h4>
        <ul class="colortheme__items">
            <li class="colortheme__item">
                <label for="base-color" class="colortheme__name">Base color</label>
                <input
                    @input="(event) => setColor(event, ColorType.base)"
                    :value="colorsPallet().base"
                    class="colortheme__input"
                    type="color"
                    name="base-color"
                    id="base-color"
                />
            </li>
            <li class="colortheme__item">
                <label for="second-color" class="colortheme__name">Second color</label>
                <input
                    @input="(event) => setColor(event, ColorType.second)"
                    :value="colorsPallet().second"
                    class="colortheme__input"
                    type="color"
                    name="second-color"
                    id="second-color"
                />
            </li>
            <li class="colortheme__item">
                <label for="accent-color" class="colortheme__name">Accent color</label>
                <input
                    @input="(event) => setColor(event, ColorType.accent)"
                    :value="colorsPallet().accent"
                    class="colortheme__input"
                    type="color"
                    name="accent-color"
                    id="accent-color"
                />
            </li>
            <li class="colortheme__item">
                <label for="text-color" class="colortheme__name">Text color</label>
                <input
                    @input="(event) => setColor(event, ColorType.text)"
                    :value="colorsPallet().text"
                    class="colortheme__input"
                    type="color"
                    name="text-color"
                    id="text-color"
                />
            </li>
        </ul>

        <AppControlsBtn>Reset</AppControlsBtn>
    </div>
</template>

<style lang="scss" scoped>
.colortheme {
    &__title {
        font-size: var(--font-size-sidebar);
        margin-bottom: var(--gap-base);
    }

    &__items {
        display: flex;
        flex-direction: column;
        gap: var(--gap-small);

        margin-bottom: var(--gap-base);

        cursor: pointer;
    }

    &__item {
        display: flex;
        align-items: center;
        gap: var(--offset-base);
    }

    &__input {
        cursor: pointer;
    }

    &__name {
        width: 120px;
        cursor: pointer;
    }

    &__reset {
        cursor: pointer;

        display: flex;
        justify-content: center;
        align-items: center;

        width: 100%;
        padding: var(--offset-base);
        margin-bottom: var(--gap-base);
        background-color: var(--bg-base);

        border: none;
        outline: none;
        border-radius: var(--b-radius-base);

        transition-property: background-color, opacity;
        transition-duration: var(--transition-short);
        transition-timing-function: ease-in-out;

        &:focus-visible {
            outline: 2px solid var(--color-accent);
            outline-offset: 1px;
        }

        &:active {
            background-color: var(--bg-base-hover);
        }

        @media (any-hover: hover) {
            &:hover {
                background-color: var(--bg-base-hover);
            }
        }
    }
}
</style>

================
File: src/components/settings/SettingsBodyHotKeys.vue
================
<script setup lang="ts"></script>

<template>
    <div class="settings-keys">
        <div class="settings-keys__item">
            <code>CTRL + s </code>
            <span> - toggle sidebar</span>
        </div>
        <div class="settings-keys__item">
            <code>CTRL + c </code>
            <span> - toggle colortheme</span>
        </div>
        <div class="settings-keys__item">
            <code>CTRL + m </code>
            <span> - toggle menu</span>
        </div>
        <div class="settings-keys__item">
            <code>right swipe</code>
            <span> - show sidebar</span>
        </div>
        <div class="settings-keys__item">
            <code>left swipe</code>
            <span> - hide sidebar</span>
        </div>
        <div class="settings-keys__item">
            <code>double tap</code>
            <span> - select note</span>
        </div>
    </div>
</template>

<style scoped lang="scss">
.settings-keys {
    &__item {
        display: flex;
        align-items: center;
        gap: 4px;

        &:not(:last-child) {
            margin-bottom: var(--offset-base);
        }

        code {
            width: 94px;
            text-align: center;
            background-color: var(--bg-base);
            border-radius: 11px;
            padding: 8px;
            transition: background-color var(--transition-short) ease-in-out;
        }
    }
}
</style>

================
File: src/components/settings/SettingsBodyLayouts.vue
================
<script setup lang="ts">
import IconLayoutsRight from '../icons/IconLayoutsRight.vue'
import IconLayoutsLeft from '../icons/IconLayoutsLeft.vue'
import { setLocalStorage } from '@/helpers/LocalStorageActions'
import { StorageKeyName, useStore } from '@/store/notesStore'

const store = useStore()

const setActiveLayoutToLeft = () => {
    store.layoutRight = false
    setLocalStorage(StorageKeyName.layoutRight, false)
}

const setActiveLayoutToRight = () => {
    store.layoutRight = true
    setLocalStorage(StorageKeyName.layoutRight, true)
}
</script>

<template>
    <div class="settings-layouts">
        <label class="settings-layouts__label" for="layouts-left">
            <input
                @change="setActiveLayoutToLeft"
                :checked="!store.layoutRight"
                value="layouts-left"
                class="settings-layouts__radio"
                type="radio"
                name="layouts-position-left"
                id="layouts-left"
            />
            <IconLayoutsLeft />
        </label>
        <label class="settings-layouts__label" for="layouts-right">
            <input
                @change="setActiveLayoutToRight"
                :checked="store.layoutRight"
                value="layouts-right"
                class="settings-layouts__radio"
                type="radio"
                name="layouts-position-right"
                id="layouts-right"
            />
            <IconLayoutsRight />
        </label>
    </div>
</template>

<style scoped lang="scss">
.settings-layouts {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    gap: 50px;

    transform: translateY(30px);


    &__label {
        display: flex;
        align-items: center;
        gap: var(--offset-base);

        position: relative;
        cursor: pointer;
    }

    &__radio {
        width: 20px;
        height: 20px;

        accent-color: var(--color-accent);
        cursor: pointer;

        &:focus-visible {
            outline: 2px solid var(--color-accent);
            outline-offset: 2px;
        }
    }
}
</style>

================
File: src/components/settings/SettingsHead.vue
================
<script setup lang="ts">
import SettingsHeadClose from './SettingsHeadClose.vue';
import SettingsHeadTitle from './SettingsHeadTitle.vue';

defineEmits(['hideModal'])
</script>

<template>
    <div class="modal__head">
        <SettingsHeadTitle />
        <SettingsHeadClose @hide-modal="$emit('hideModal')" />
    </div>
</template>

<style lang="scss" scoped>
.modal__head {
    display: flex;
    align-items: center;
    justify-content: space-between;

    margin-bottom: 32px;

    @media (max-width: 768px){
        margin-bottom: 18px;
    }
}
</style>

================
File: src/components/settings/SettingsHeadClose.vue
================
<script setup lang="ts">
import IconClose from '@/components/icons/IconClose.vue'
defineEmits(['hideModal'])
</script>

<template>
    <button @click="$emit('hideModal')" class="modal__close" type="button">
        <IconClose />
    </button>
</template>

<style scoped lang="scss">
.modal__close {
    background-color: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    border-radius: var(--b-radius-base);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3px;

    @media (any-hover: hover) {
        &:hover {
            svg {
                opacity: 0.8;
            }
        }
    }
    &:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 1px;
    }
}
</style>

================
File: src/components/settings/SettingsHeadTitle.vue
================
<template>
    <h3 class="modal__title">
        <slot>Settings</slot>
    </h3>
</template>

<style lang="scss" scoped>
.modal__title {
    color: var(--color-text);
    font-size: var(--font-size-title);
    font-weight: 700;
    transition: color var(--transition-short) ease-in-out;
}
</style>

================
File: src/components/settings/TheSettings.vue
================
<script setup lang="ts">
import { vOnClickOutside } from '@vueuse/components'
import { useStore } from '@/store/notesStore'
import { useToggleOverlay } from '@/hooks/useToggleOverlay'
import { onBeforeUnmount, onMounted } from 'vue'
import SettingsHead from './SettingsHead.vue'
import SettingsBody from './SettingsBody.vue'

const store = useStore()
const { hideOverlay } = useToggleOverlay()

const hideModal = () => {
    store.modalIsOpen = false
    hideOverlay()
}

const handleKeyUp = (event: KeyboardEvent) => {
    if (event.key === 'Escape' && store.modalIsOpen) {
        hideModal()
    }
}

onMounted(() => {
    window.addEventListener('keyup', handleKeyUp)
})

onBeforeUnmount(() => {
    window.removeEventListener('keyup', handleKeyUp)
})
</script>

<template>
    <Transition name="modal">
        <section class="modal" v-show="store.modalIsOpen" v-on-click-outside="hideModal">
            <SettingsHead @hide-modal="hideModal" />
            <SettingsBody />
        </section>
    </Transition>
</template>

<style lang="scss" scoped>
.modal {
    position: fixed;
    z-index: 3;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    // background-color: var(--bg-second);
    background-color: var(--bg-second);

    border-radius: var(--b-radius-base);
    width: calc(100% - 18px);
    max-width: 350px;
    height: 440px;


    padding: calc(var(--offset-base) * 2);

    transition: background-color var(--transition-short) ease-in-out;

    @media (max-width: 768px){
        height: 390px;
    }
}

.modal-enter-active,
.modal-leave-active {
    transition: opacity var(--transition-short) ease-in-out;
}

.modal-enter-from,
.modal-leave-to {
    opacity: 0;
}
</style>

================
File: src/components/AppArea.vue
================
<script setup lang="ts">
import { useFocusOnActiveNote } from '@/hooks/useFocusOnActiveNote'
import { useFocusOnTextarea } from '@/hooks/useFocusOnTextarea'
import { useToggleSidebar } from '@/hooks/useToggleSidebar'
import { useStore } from '@/store/notesStore'
import { useSwipe } from '@vueuse/core'
import { useTemplateRef } from 'vue'
const store = useStore()

const { showSidebar, hideSidebar } = useToggleSidebar()
const { focusOnActiveNote } = useFocusOnActiveNote()
const { setFocusOnTextarea } = useFocusOnTextarea()
const areaField = useTemplateRef('area-field')

useSwipe(areaField, {
    threshold: 120,

    onSwipeEnd(e: TouchEvent, direction) {
        if (direction === 'left') {
            store.layoutRight
                ? (showSidebar(), focusOnActiveNote())
                : (hideSidebar(), setFocusOnTextarea())
        }

        if (direction === 'right') {
            store.layoutRight
                ? (hideSidebar(), setFocusOnTextarea())
                : (showSidebar(), focusOnActiveNote())
        }
    }
})
</script>

<template>
    <div class="text-field">
        <textarea
            v-model="store.notesText"
            @blur="store.updateText(), store.readItem()"
            :disabled="store.itemsListIsEmpty"
            ref="area-field"
            class="text-field__area"
            name="user-text"
            id="area-base"
            data-notes-area
            aria-label="text field"
            spellcheck="false"
        ></textarea>
    </div>
</template>

<style scoped lang="scss">
.text-field {
    flex-grow: 2;
    width: 100%;

    transition: width var(--transition-base) ease-in-out;

    position: relative;
    &::after {
        pointer-events: none;

        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        z-index: 2;

        border-radius: var(--b-radius-base);
        background-color: var(--color-overlay);
        transition: background-color var(--transition-short) ease-in-out;
    }

    @media (max-width: 768px) {
        &::after {
            content: '';
        }
    }

    &__area {
        height: 100%;
        width: 100%;

        resize: none;
        outline: none;

        border: 6px solid transparent;

        color: var(--color-text);
        font-size: var(--font-size-text);
        font-family: var(--font-base);
        font-weight: 400;
        line-height: 1.5;

        background-color: var(--bg-second);

        border-radius: var(--b-radius-base);
        padding: calc(var(--offset-base) - 6px);

        transition:
            color var(--transition-short) ease-in-out,
            background-color var(--transition-short) ease-in-out;

        &::-webkit-scrollbar {
            width: 5px;
        }

        &::-webkit-scrollbar-track {
            background-color: var(--bg-base);
            border-radius: 2px;
        }

        &::-webkit-scrollbar-thumb {
            background-color: var(--color-accent);
            border-radius: 2px;
            cursor: pointer;
        }
        @media (max-height: 500px) and (orientation: landscape) {
            min-height: 130px;
        }
    }
}
</style>

================
File: src/components/AppBase.vue
================
<script setup lang="ts">
import { computed, onMounted } from 'vue'
import { useStore } from '@/store/notesStore'
import { useThemeStore } from '@/store/themeStore'

import AppBaseTop from './AppBaseTop.vue'
import AppBaseBody from './AppBaseBody.vue'
import TheSettings from './settings/TheSettings.vue'
import { fixIphoneResizeViewport } from '@/helpers/FixIphoneResizeViewPort'

const store = useStore()
const themeStore = useThemeStore()

const sidebarToggleClass = computed(() => {
    return store.sidebarIsActive ? 'sidebar--visible' : 'sidebar--hidden'
})

const layoutsToggleClass = computed(() => {
    return !store.layoutRight ? '' : 'layouts-right'
})

const handleLeaveOnPage = () => {
    store.updateText()
    store.updateTitle()
}

onMounted(() => {
    setTimeout(() => {
        document.body.classList.remove('no-transition')
    }, 100)

    fixIphoneResizeViewport()

    themeStore.loadColorTheme()
    window.addEventListener('beforeunload', handleLeaveOnPage)
})
</script>

<template>
    <main
        class="editor"
        :class="[sidebarToggleClass, layoutsToggleClass]"
        :inert="store.modalIsOpen"
    >
        <AppBaseTop />
        <AppBaseBody />
    </main>
    <TheSettings />
</template>

<style lang="scss">
.editor {
    max-width: var(--container-width);
    margin: 0 auto;
    width: 100%;

    display: flex;
    flex-direction: column;
    gap: var(--gap-base);

    flex-grow: 2;

    padding: 0 var(--offset-base);
}

.layouts-right {
    .editor__top,
    .search {
        flex-direction: row-reverse;
    }

    .editor__body {
        flex-direction: row;
    }

    .sidebar-control {
        transform: rotate(180deg);
    }
}

.sidebar--visible {
    @media (max-width: 768px) {
        .editor__top {
            gap: 0;
        }

        .notes-title {
            width: 0;
            padding: 0;
            opacity: 0;
            overflow: hidden;
        }
    }
}

.sidebar--hidden {
    .search {
        width: 64px;

        @media (max-width: 768px) {
            // width: 56px;
        }

        @media (max-height: 500px) and (orientation: landscape) {
            width: 42px;
            padding: 4px;
        }

        &__field {
            visibility: hidden;
            opacity: 0;
            width: 0;
            padding: 0;
        }

        &__close {
            visibility: hidden;
            opacity: 0;
        }
    }

    .sidebar {
        width: 0px;
        opacity: 0;
        visibility: hidden;
    }

    .controls {
        width: 0px;
        opacity: 0;
    }

    .empty-list {
        opacity: 0;
    }

    .info {
        display: none;
    }

    .editor__body {
        gap: 0;
    }

    .text-field::after {
        background-color: rgba(0, 0, 0, 0);
    }

    .svg-arrow {
        transform: rotateY(190deg) translateX(-5px);
        transition:
            transform var(--transition-base) ease-in-out,
            stroke var(--transition-short) ease-in-out;
    }

    .svg-dots {
        opacity: 0;
        transition: opacity var(--transition-base) ease-in-out;
    }

    .svg-line {
        transform: translateX(-4px);
        transition:
            transform var(--transition-base) ease-in-out,
            stroke var(--transition-short) ease-in-out;
    }
}
</style>

================
File: src/components/AppBaseBody.vue
================
<script setup lang="ts">
import AppArea from './AppArea.vue'
import AppSideBar from './AppSideBar.vue';
</script>

<template>
    <div class="editor__body">
        <AppArea />
        <AppSideBar />
    </div>
</template>

<style lang="scss" scoped>
.editor__body {
    position: relative;

    display: flex;
    flex-direction: row-reverse;
    gap: var(--gap-base);

    width: 100%;
    height: 100%;

    transition: gap var(--transition-base) ease-in-out;
}
</style>

================
File: src/components/AppBaseTop.vue
================
<script setup lang="ts">
import AppSearch from './AppSearch.vue'
import AppTitle from './AppTitle.vue'
</script>

<template>
    <div class="editor__top">
        <AppSearch />
        <AppTitle />
    </div>
</template>

<style lang="scss" scoped>
.editor__top {
    display: flex;
    gap: var(--gap-base);
    transition: gap var(--transition-base) ease-in-out;
}
</style>

================
File: src/components/AppControls.vue
================
<script setup lang="ts">
import BaseBtn from '@/components/AppControlsBtn.vue'
import IconPlus from './icons/IconPlus.vue'
import IconTrash from './icons/IconTrash.vue'
import { useStore } from '@/store/notesStore'
import { useFocusOnTitle } from '@/hooks/useFocusOnTitle'
import { useFocusOnTextarea } from '@/hooks/useFocusOnTextarea'

const store = useStore()

const { setFocusOnTitle } = useFocusOnTitle()
const { setFocusOnTextarea } = useFocusOnTextarea()

const hideSidebarOnMobile = () => {
    if (window.innerWidth < 768) {
        store.sidebarIsActive = !store.sidebarIsActive
    }
}
</script>

<template>
    <div class="controls">
        <div class="controls__wrapper">
            <BaseBtn
                class="btn--add"
                :class="{ 'btn--add-active': store.itemsListIsEmpty }"
                @click="store.createItem(), setFocusOnTitle(), hideSidebarOnMobile()"
                ref="btnAdd"
                aria-label="Button to add new note"
            >
                <IconPlus />
            </BaseBtn>
            <BaseBtn
                class="btn--delete"
                @click="store.deleteItem(), setFocusOnTextarea()"
                aria-label="Button to delete this note"
            >
                <IconTrash />
            </BaseBtn>
        </div>
    </div>
</template>

<style lang="scss" scoped>
.controls {
    width: 100%;
    overflow: hidden;
    transition:
        width var(--transition-base) ease-in-out,
        opacity var(--transition-short) ease-in-out;

    &__wrapper {
        display: flex;
        gap: var(--gap-small);

        margin-top: auto;
        padding: var(--offset-small);

        border-radius: var(--b-radius-base);
        background-color: var(--bg-second);
        transition: background-color var(--transition-short) ease-in-out;
    }
}
</style>

================
File: src/components/AppControlsBtn.vue
================
<template>
    <button class="btn" type="button">
        <slot></slot>
    </button>
</template>

<style lang="scss">
.btn {
    cursor: pointer;

    display: flex;
    justify-content: center;
    align-items: center;

    width: 100%;
    padding: var(--offset-base);
    background-color: var(--bg-base);

    border: none;
    outline: none;
    border-radius: var(--b-radius-base);

    transition-property: background-color, opacity;
    transition-duration: var(--transition-short);
    transition-timing-function: ease-in-out;

    &:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 1px;
    }

    &:active {
        background-color: var(--bg-base-hover);
    }

    @media (any-hover: hover) {
        &:hover {
            background-color: var(--bg-base-hover);
        }
    }
}

.btn--add {
    outline: 2px solid transparent;
    outline-offset: 1px;
    @media (any-hover: hover) {
        &:hover {
            .svg--plus {
                transform: rotate(90deg);
            }
        }
    }
}

.btn--add-active {
    outline-color: var(--color-accent);
    transition:
        outline-color var(--transition-short) ease-in-out,
        background-color var(--transition-short) ease-in-out;
}

.btn--delete {
    @media (any-hover: hover) {
        &:hover {
            .svg--trash-top {
                transform-origin: right 75%;
                transform: rotate(25deg) translate(-2px, -1px);
            }
        }
    }
}
</style>

================
File: src/components/AppSearch.vue
================
<script setup lang="ts">
import AppSearchInput from '@/components/AppSearchInput.vue'
import AppSearchSideBarToggle from '@/components/AppSearchSidebarToggle.vue'
</script>

<template>
    <div class="search">
        <AppSearchSideBarToggle />
        <AppSearchInput />
    </div>
</template>

<style lang="scss" scoped>
.search {
    display: flex;
    gap: var(--gap-small);

    width: var(--side-bar-width);
    padding: var(--offset-small);

    outline: none;
    border-radius: var(--b-radius-base);
    background-color: var(--bg-second);

    transition:
        width var(--transition-short) ease-in-out,
        background-color var(--transition-short) ease-in-out;

    @media (max-width: 768px) {
        width: 100%;
    }
}
</style>

================
File: src/components/AppSearchInput.vue
================
<script setup lang="ts">
import { useStore } from '@/store/notesStore'
import IconClose from './icons/IconClose.vue'
const store = useStore()

const clearInput = () => (store.searchText = '')
</script>

<template>
    <div class="search__field-wrap">
        <input
            v-model="store.searchText"
            @input="store.searchItems()"
            type="text"
            class="search__field"
            placeholder="Search"
        />
        <Transition name="icon-close">
            <button
                @click="clearInput"
                v-show="store.searchText"
                class="search__close"
                type="button"
            >
                <IconClose />
            </button>
        </Transition>
    </div>
</template>

<style lang="scss" scoped>
.search__field {
    width: 100%;
    height: 100%;
    padding: var(--offset-base);

    border: none;
    outline: none;
    border-radius: var(--b-radius-base);

    font-family: var(--font-base);
    font-size: var(--font-size-text);
    color: var(--color-text);
    background-color: var(--bg-base);

    transition:
        color var(--transition-short) ease-in-out,
        visibility var(--transition-base) ease-in-out,
        opacity var(--transition-base) ease-in-out,
        width var(--transition-base) ease-in-out,
        padding var(--transition-base) ease-in-out,
        background-color var(--transition-short) ease-in-out;

    &:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 1px;
        border-radius: var(--b-radius-base);
    }

    &::placeholder {
        color: var(--color-text);
        opacity: 0.7;
        transition: color var(--transition-short) ease-in-out;
    }

    @media (any-hover: hover) {
        &:hover {
            background-color: var(--bg-base-hover);
        }
    }
}

.search__field-wrap {
    width: 100%;
    position: relative;
}

.search__close {
    position: absolute;
    top: 50%;
    right: 6px;

    transform: translateY(-50%);

    cursor: pointer;

    display: flex;
    align-items: center;
    justify-content: center;

    transition:
        opacity 0.2s ease-in-out,
        visibility 0.2s ease-in-out;

    svg {
        width: 14px;
        height: 14px;
    }
}
.icon-close-enter-active,
.icon-close-leave-active {
    transition: opacity var(--transition-short) ease;
}

.icon-close-enter-from,
.icon-close-leave-to {
    opacity: 0;
}
</style>

================
File: src/components/AppSearchSidebarToggle.vue
================
<script setup lang="ts">
import { useToggleSidebar } from '@/hooks/useToggleSidebar'
import { onBeforeUnmount, onMounted } from 'vue'
import IconSidebar from './icons/IconSidebar.vue'

const { toggleSidebar } = useToggleSidebar()

function keyDownToggleSidebar(event: KeyboardEvent) {
    if (event.ctrlKey && event.key === 's') {
        event.preventDefault()
        toggleSidebar()
    }
}

onMounted(() => {
    window.addEventListener('keydown', keyDownToggleSidebar)
})

onBeforeUnmount(() => {
    window.removeEventListener('keydown', keyDownToggleSidebar)
})
</script>

<template>
    <button
        @click="toggleSidebar"
        class="sidebar-control"
        type="button"
        aria-label="toggle sidebar"
    >
        <IconSidebar />
    </button>
</template>

<style scoped lang="scss">
.sidebar-control {
    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--offset-small) 12px;
    border: none;
    border-radius: var(--b-radius-base);

    cursor: pointer;
    background-color: var(--bg-base);

    transition: background-color var(--transition-short) ease-in-out;

    @media (max-height: 500px) and (orientation: landscape) {
        padding: 6px 10px;
    }

    @media (any-hover: hover) {
        &:hover {
            background-color: var(--bg-base-hover);
        }
    }

    &:active {
        background-color: var(--bg-base-hover);
    }

    &:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 1px;
    }
}

</style>

================
File: src/components/AppSideBar.vue
================
<script setup lang="ts">
import AppSidebarList from './AppSidebarList.vue'
import AppControls from './AppControls.vue'
import { onMounted } from 'vue'
import { useStore } from '@/store/notesStore'
import { useDeviceType } from '@/hooks/useDeviceType'
const store = useStore()

const { isMobile } = useDeviceType()

const hideSidebar = (): void => {
    store.sidebarIsActive = false
}
onMounted(() => {
    if (isMobile()) hideSidebar()
})
</script>

<template>
    <aside class="sidebar">
        <AppSidebarList />
        <AppControls v-once />
    </aside>
</template>

<style lang="scss" scoped>
.sidebar {
    display: flex;
    flex-direction: column;
    gap: var(--gap-base);
    flex-shrink: 0;

    width: var(--side-bar-width);
    height: 100%;

    overflow: hidden;
    transition: var(--transition-base) ease-in-out;

    @media (max-width: 768px) {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 3;
        width: 100%;
    }
}
</style>

================
File: src/components/AppSidebarList.vue
================
<script setup lang="ts">
import { computed, nextTick, onMounted, useTemplateRef, watch } from 'vue'
import AppSidebarListItem from './AppSidebarListItem.vue'
import IconFolderEmpty from './icons/IconFolderEmpty.vue'
import { useStore } from '@/store/notesStore'
import { useSwipe } from '@vueuse/core'
import { useToggleSidebar } from '@/hooks/useToggleSidebar'
import { useFocusOnTextarea } from '@/hooks/useFocusOnTextarea'

const store = useStore()
const sidebarElem = useTemplateRef('sideBarList')
const { hideSidebar, showSidebar } = useToggleSidebar()
const { setFocusOnTextarea } = useFocusOnTextarea()

const clickHandler = (id: number) => {
    store.setId(id)
    store.readItem()
    setFocusOnTextarea()
}

const doubleTapHandler = (id: number) => {
    clickHandler(id)
    hideSidebar()
}

const itemIsClicked = (id: number): boolean => {
    return id === store.activeItemId
}

useSwipe(sidebarElem, {
    threshold: 120,

    onSwipeEnd(e: TouchEvent, direction) {
        if (direction === 'left') {
            store.layoutRight ? showSidebar() : hideSidebar()
        }

        if (direction === 'right') {
            store.layoutRight ? hideSidebar() : showSidebar()
        }
    }
})

const scrollSibebarToBottom = () => {
    nextTick(() => {
        if (sidebarElem.value) {
            const { clientHeight } = sidebarElem.value
            const { scrollHeight } = sidebarElem.value

            if (scrollHeight > clientHeight) {
                sidebarElem.value.classList.add('list--offset')
                sidebarElem.value.scrollTo({
                    top: sidebarElem.value.scrollHeight
                })
            } else {
                sidebarElem.value.classList.remove('list--offset')
            }
        }
    })
}

const itemsToShow = computed(() => {
    if (store.searchText.trim() !== '') {
        return store.filteredNotesItems
    }
    return store.notesItems
})

watch(store.notesItems, scrollSibebarToBottom)

onMounted(() => {
    store.readItem()
    if (store.itemsListIsEmpty) store.createItem()
})
</script>

<template>
    <ul class="list" ref="sideBarList">
        <Transition name="list-empty">
            <li v-if="store.itemsListIsEmpty" class="empty-list">
                <IconFolderEmpty />
            </li>
        </Transition>
        <TransitionGroup name="list">
            <AppSidebarListItem
                v-for="item in itemsToShow"
                :key="item.id"
                :title="item.title"
                :class="{ 'list__item--active': itemIsClicked(item.id) }"
                @click="clickHandler(item.id)"
                v-on-double-tap="doubleTapHandler"
            />
        </TransitionGroup>
    </ul>
</template>

<style lang="scss" scoped>
.list {
    overflow-y: auto;
    overflow-x: hidden;

    display: flex;
    flex-direction: column;
    gap: 3px;

    color: var(--color-text);
    font-size: var(--font-size-sidebar);
    background-color: var(--bg-second);

    border-radius: var(--b-radius-base);
    border: 6px solid transparent;

    position: relative;

    transition: background-color var(--transition-short) ease-in-out;

    flex-grow: 2;
    height: calc(100vh - 240px);

    @supports (height: calc(100dvh - 240px)) {
        height: calc(100dvh - 240px);
    }

    &::-webkit-scrollbar {
        width: 5px;
    }

    &::-webkit-scrollbar-track {
        background-color: var(--bg-base);
        border-radius: 2px;
    }

    &::-webkit-scrollbar-thumb {
        background-color: var(--color-accent);
        cursor: pointer;
        border-radius: 2px;
    }

    &--offset {
        padding-right: var(--gap-small);
    }
}

.empty-list {
    list-style-type: none;

    position: absolute;
    top: 50%;
    left: 50%;

    transform: translate(-50%, -50%) scale(1);
}

.list-empty-enter-active,
.list-empty-leave-active {
    transition: opacity var(--transition-short) ease-in-out;
}

.list-empty-enter-from,
.list-empty-leave-to {
    opacity: 0;
}

.list-enter-active,
.list-leave-active {
    transition: var(--transition-short) ease-in-out;
}

.list-enter-from,
.list-leave-to {
    opacity: 0;
    transform: translateY(10px);
}
</style>

================
File: src/components/AppSidebarListItem.vue
================
<script setup lang="ts">
defineProps<{
    title: string
}>()
</script>

<template>
    <li class="list__item">
        <button class="list__item-btn">
            <p class="list__item-name">
                {{ title }}
            </p>
        </button>
    </li>
</template>

<style lang="scss" scoped>
.list__item {
    list-style-type: none;
    border-radius: var(--b-radius-base);

    @media (any-hover: hover) {
        &:hover {
            background-color: var(--bg-base);
        }
    }

    &--active {
        background-color: var(--color-accent);
        transition: background-color var(--transition-short) ease-in-out;

        @media (any-hover: hover) {
            &:hover {
                background-color: var(--color-accent);
            }
        }

        .list__item-btn:focus-visible {
            outline: 2px solid var(--color-text);
            outline-offset: -2px;
            border-radius: var(--b-radius-base);
        }
    }

    &-btn {
        cursor: pointer;
        text-align: left;

        width: 100%;
        padding: var(--offset-base);

        &:focus-visible {
            outline: 2px solid var(--color-accent);
            outline-offset: -2px;
            border-radius: var(--b-radius-base);
        }
    }

    &-name {
        color: var(--color-text);
        font-size: var(--font-size-text);
        font-family: var(--font-base);

        overflow: hidden;
        display: -webkit-box;
        line-clamp: 1;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;

        transition: color var(--transition-short) ease-in-out;
    }
}

[data-color-theme='light'] .list__item--active .list__item-name {
    color: var(--bg-base);
}
</style>

================
File: src/components/AppTitle.vue
================
<script setup lang="ts">
import { useTemplateRef } from 'vue'
import { useStore } from '@/store/notesStore'
import { useHighLightText } from '@/hooks/useHighLightText'

const store = useStore()
const titleInput = useTemplateRef('titleInput')
const { highLightText } = useHighLightText()
</script>

<template>
    <div class="notes-title">
        <input
            @blur="store.updateTitle()"
            @focus="highLightText(titleInput)"
            v-model="store.notesTitle"
            ref="titleInput"
            :disabled="store.itemsListIsEmpty"
            autofocus
            type="text"
            class="notes-title__field"
            placeholder="Add a title"
            spellcheck="false"
            aria-label="title field"
            data-notes-title
        />
    </div>
</template>

<style scoped lang="scss">
.notes-title {
    flex-grow: 2;
    width: calc(100% - (var(--side-bar-width) + var(--gap-base)));

    overflow: hidden;

    transition-property: visibility, opacity, width, padding;
    transition-duration: var(--transition-base);
    transition-timing-function: ease-in-out;

    &__field {
        width: 100%;
        padding: 16px;

        font-size: var(--font-size-title);
        font-weight: 700;
        font-family: var(--font-base);
        color: var(--color-text);
        background-color: var(--bg-second);

        outline: none;
        border: none;
        border-radius: var(--b-radius-base);

        transition:
            background-color var(--transition-short) ease-in-out,
            color var(--transition-short) ease-in-out;

        &::placeholder {
            opacity: 0.7;
            font-weight: normal;
            color: var(--color-text);
            transition: color var(--transition-short) ease-in-out;
        }

        @media (max-height: 500px) and (orientation: landscape) {
            padding: 6px;
        }
    }
}
</style>

================
File: src/directives/doubleTapDirective.ts
================
import { type DirectiveBinding } from 'vue'

export const doubleTapDirective = {
    mounted(el: HTMLElement, binding: DirectiveBinding) {
        let clickCounter = 0
        const tapThreshold = 300

        const handleTapStart = () => {
            clickCounter++
            setTimeout(() => {
                clickCounter++
                clickCounter = 0
            }, tapThreshold)
        }

        const handleTapEnd = () => {
            if (clickCounter === 2) binding.value()
        }

        el.addEventListener('touchstart', handleTapStart)
        el.addEventListener('touchend', handleTapEnd)
    }
}

================
File: src/directives/showPerformanceDirective.ts
================
import { onBeforeMount, onMounted } from 'vue'
onBeforeMount(() => {
    performance.mark('startRender')
})

onMounted(() => {
    performance.mark('endRender')
    performance.measure('renderTime', 'startRender', 'endRender')

    const measure = performance.getEntriesByName('renderTime')[0]
    console.log(`Component render time: ${measure.duration}ms`)
})

================
File: src/helpers/FixIphoneResizeViewPort.ts
================
export const fixIphoneResizeViewport = () => {
    if (navigator.userAgent.includes('iPhone')) {
        const headElem = document.querySelector('[name=viewport]')
        if (headElem) {
            headElem.setAttribute(
                'content',
                'width=device-width, initial-scale=1, maximum-scale=1 interactive-widget=resizes-content'
            )
        }
    }
}

================
File: src/helpers/LocalStorageActions.ts
================
export function getLocalStorage(key: string) {
    const value = localStorage.getItem(key)
    if (value) {
        return JSON.parse(value)
    }
}

export function setLocalStorage<T>(key: string, data: T): void {
    try {
        localStorage.setItem(key, JSON.stringify(data))
    } catch (error) {
        console.log('error2')
        // throw new Error(`Error saving to localStorage: ${error}`)
    }
}

================
File: src/hooks/useDeviceType.ts
================
export function useDeviceType() {
    enum MediaSize {
        mobile = 767,
        table = 1023,
        dekstop = 1024
    }

    function isMobile(): boolean {
        return window.matchMedia(`(max-width: ${MediaSize.mobile}px)`).matches
    }

    function isTablet(): boolean {
        return window.matchMedia(
            `(min-width: ${MediaSize.mobile}px) and (max-width: ${MediaSize.table}px)`
        ).matches
    }

    function isDesktop(): boolean {
        return window.matchMedia(`(min-width: ${MediaSize.dekstop}px)`).matches
    }

    return { isMobile, isTablet, isDesktop }
}

================
File: src/hooks/useFocusOnActiveNote.ts
================
export function useFocusOnActiveNote() {
    function focusOnActiveNote() {
        const activeNote = document.querySelector('.sidebar-control') as HTMLButtonElement
        if (activeNote) {
            setTimeout(() => {
                activeNote.focus()
            }, 500)
        }
    }

    return { focusOnActiveNote }
}

================
File: src/hooks/useFocusOnTextarea.ts
================
import { nextTick } from 'vue'

export function useFocusOnTextarea() {
    function setFocusOnTextarea() {
        const areaElem = document.querySelector('[data-notes-area]') as HTMLTextAreaElement
        if (areaElem && window.innerWidth > 768) {
            nextTick(() => areaElem.focus())
        }
    }

    return { setFocusOnTextarea }
}

================
File: src/hooks/useFocusOnTitle.ts
================
import { nextTick } from 'vue'

export function useFocusOnTitle() {
    function setFocusOnTitle() {
        const titleElem = document.querySelector('[data-notes-title]') as HTMLInputElement
        if (titleElem) {
            nextTick(() => titleElem.focus())
        }
    }

    return { setFocusOnTitle }
}

================
File: src/hooks/useHighLightText.ts
================
import { nextTick } from 'vue'

export function useHighLightText() {
    function highLightText(elem: HTMLInputElement | null) {
        nextTick(() => {
            if (elem) {
                elem.setSelectionRange(0, elem.value.length)
            }
        })
    }

    return { highLightText }
}

================
File: src/hooks/useToggleOverlay.ts
================
export function useToggleOverlay() {
    function showOverlay() {
        document.body.setAttribute('data-overlay', 'true')
    }

    function hideOverlay() {
        document.body.removeAttribute('data-overlay')
    }

    return { showOverlay, hideOverlay }
}

================
File: src/hooks/useToggleSidebar.ts
================
import { setLocalStorage } from '@/helpers/LocalStorageActions'
import { StorageKeyName, useStore } from '@/store/notesStore'

export function useToggleSidebar() {
    const store = useStore()

    function toggleSidebar() {
        store.sidebarIsActive = !store.sidebarIsActive
        setLocalStorage(StorageKeyName.sidebar, store.sidebarIsActive)
    }

    function showSidebar() {
        store.sidebarIsActive = true
        setLocalStorage(StorageKeyName.sidebar, store.sidebarIsActive)
    }

    function hideSidebar() {
        store.sidebarIsActive = false
        setLocalStorage(StorageKeyName.sidebar, store.sidebarIsActive)
    }

    return { toggleSidebar, showSidebar, hideSidebar }
}

================
File: src/store/notesStore.ts
================
import { defineStore } from 'pinia'
import { getLocalStorage, setLocalStorage } from '@/helpers/LocalStorageActions'

interface NotesItem {
    id: number
    title: string
    text: string
}

export const enum StorageKeyName {
    id = 'activeItemIds',
    items = 'notesItems',
    sidebar = 'sideBarIsActive',
    layoutRight = 'layoutsRight'
}

export const useStore = defineStore('storeBase', {
    state: () => {
        return {
            notesTitle: 'Untitled',
            notesTitleIsFocused: false,
            notesText: '',
            searchText: '',
            modalIsOpen: false,
            layoutRight: getLocalStorage(StorageKeyName.layoutRight) ?? false,
            sidebarIsActive: getLocalStorage(StorageKeyName.sidebar) ?? true,
            activeItemId: getLocalStorage(StorageKeyName.id) || 0,
            notesItems: (getLocalStorage(StorageKeyName.items) || []) as NotesItem[],
            filteredNotesItems: (getLocalStorage(StorageKeyName.items) || []) as NotesItem[]
        }
    },

    actions: {
        saveToLocalStorage(): void {
            setLocalStorage(StorageKeyName.items, this.notesItems)
            setLocalStorage(StorageKeyName.id, this.activeItemId)
        },

        createItem(): void {
            const newItem: NotesItem = {
                id: Date.now(),
                title: 'Untitled',
                text: ''
            }

            this.notesItems.push(newItem)
            this.filteredNotesItems = [...this.notesItems]
            this.saveToLocalStorage()
            this.setId(newItem.id)
            this.resetTextToDefault()
            this.notesTitleIsFocused = true
        },

        readItem(): void {
            const activeItem = this.getActiveItem
            if (activeItem) {
                this.notesText = activeItem.text
                this.notesTitle = activeItem.title
            }
        },

        updateTitle(): void {
            const activeItem = this.getActiveItem
            if (!this.notesTitle.trim()) {
                this.notesTitle = 'Untitled'
            }
            if (activeItem) {
                activeItem.title = this.notesTitle
                this.saveToLocalStorage()
            }
        },

        updateText(): void {
            const activeItem = this.getActiveItem
            if (activeItem) {
                activeItem.text = this.notesText
                this.saveToLocalStorage()
            }
        },

        setId(id: number): void {
            this.activeItemId = id
            this.saveToLocalStorage()
        },

        resetTextToDefault(): void {
            this.notesTitle = 'Untitled'
            this.notesText = ''
        },

        deleteItem(): void {
            const index = this.notesItems.findIndex((item) => item.id === this.activeItemId)

            if (index !== -1) {
                this.notesItems.splice(index, 1)
                this.filteredNotesItems = [...this.notesItems]
                this.saveToLocalStorage()

                if (index > 0) {
                    this.activeItemId = this.notesItems[index - 1]?.id
                } else if (this.notesItems.length > 0) {
                    this.activeItemId = this.notesItems[0].id
                } else {
                    this.activeItemId = 0
                    this.resetTextToDefault()
                }
            }
            this.readItem()
        },

        searchItems(): void {
            if (this.searchText === '') {
                this.filteredNotesItems = [...this.notesItems]
            } else {
                this.filteredNotesItems = this.notesItems.filter(
                    (item) =>
                        item.title.toLowerCase().includes(this.searchText.toLowerCase()) ||
                        item.text.toLowerCase().includes(this.searchText.toLowerCase())
                )
            }
        }
    },

    getters: {
        getActiveItem: (state): NotesItem | undefined => {
            return state.notesItems.find((item) => item.id === state.activeItemId)
        },

        itemsListIsEmpty: (state): boolean => {
            return state.notesItems.length === 0
        }
    }
})

================
File: src/store/themeStore.ts
================
import { defineStore } from 'pinia'

export const useThemeStore = defineStore('themeStore', {
    state: () => {
        return {
            activeTheme: '',
            defaultTheme: 'dark',
            domDataAttr: 'data-color-theme'
        }
    },

    actions: {
        setColorTheme(themeName: string): void {
            this.activeTheme = themeName
            localStorage.setItem('color-theme', themeName)
            document.body.setAttribute(this.domDataAttr, themeName)
        },

        setDefaultTheme() {
            this.setColorTheme(this.defaultTheme)
            document.body.setAttribute(this.domDataAttr, this.defaultTheme)
        },

        loadColorTheme() {
            this.colorThemeIsNotFound
                ? this.setDefaultTheme()
                : this.setColorTheme(this.getCurrentTheme)
        },

        toggleColorTheme() {
            this.activeTheme === 'dark' ? this.setColorTheme('light') : this.setColorTheme('dark')
        }
    },

    getters: {
        getCurrentTheme(): string {
            return localStorage.getItem('color-theme') ?? this.defaultTheme
        },

        colorThemeIsNotFound(): boolean {
            return localStorage.getItem('color-theme') === null
        }
    }
})

================
File: src/App.vue
================
<script setup lang="ts">
import TheHeader from './components/common/TheHeader.vue'
import AppBase from './components/AppBase.vue'
</script>

<template>
    <TheHeader />
    <AppBase />
</template>

================
File: src/main.ts
================
import './assets/styles/main.css'

import { createApp } from 'vue'
import App from './App.vue'
import { createPinia } from 'pinia'
import { doubleTapDirective } from './directives/doubleTapDirective'

const app = createApp(App)
const pinia = createPinia()

app.use(pinia)
app.directive('on-double-tap', doubleTapDirective)
app.mount('#app')

================
File: .eslintrc.cjs
================
/* eslint-env node */
require('@rushstack/eslint-patch/modern-module-resolution')

module.exports = {
  root: true,
  'extends': [
    'plugin:vue/vue3-essential',
    'eslint:recommended',
    '@vue/eslint-config-typescript',
    '@vue/eslint-config-prettier/skip-formatting'
  ],
  parserOptions: {
    ecmaVersion: 'latest'
  },
  rules: {
  "@typescript-eslint/no-unused-vars": "off"
  },
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.DS_Store
dist-ssr
coverage
*.local
.vite

/cypress/videos/
/cypress/screenshots/

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

*.tsbuildinfo

================
File: .prettierrc.json
================
{
  "$schema": "https://json.schemastore.org/prettierrc",
  "semi": false,
  "tabWidth": 4,
  "singleQuote": true,
  "printWidth": 100,
  "trailingComma": "none"
}

================
File: CODE_OF_CONDUCT.md
================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.

================
File: CONTRIBUTING.md
================
Thank you for your interest in the V-Notes project! I sincerely appreciate any efforts you make, whether it's fixing bugs, suggesting improvements, or adding new features.

================
File: env.d.ts
================
/// <reference types="vite/client" />

================
File: index.html
================
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
        />
        <link rel="apple-touch-icon" sizes="180x180" href="./favicon/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="./favicon/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="./favicon/favicon-16x16.png" />
        <link rel="manifest" href="./favicon/site.webmanifest" />
        <link rel="mask-icon" href="./favicon/safari-pinned-tab.svg" color="#5bbad5" />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="description" content="V-Notes app build on Vue 3" />
        <title>V-Notes</title>
    </head>
    <body class="no-transition" >
        <div id="app"></div>
        <script type="module" src="/src/main.ts"></script>
    </body>
</html>

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Alexander-Shulginov

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "vue-first",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" -- && npx serve dist",
    "src-to-txt": "npx repomix .",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix --ignore-path .gitignore",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "@quasar/extras": "^1.16.12",
    "@vueuse/components": "^11.1.0",
    "@vueuse/core": "^11.1.0",
    "pinia": "^2.2.2",
    "quasar": "^2.16.11",
    "vue": "^3.4.29"
  },
  "devDependencies": {
    "@quasar/vite-plugin": "^1.7.0",
    "@rushstack/eslint-patch": "^1.8.0",
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.14.5",
    "@vitejs/plugin-vue": "^5.0.5",
    "@vue/eslint-config-prettier": "^9.0.0",
    "@vue/eslint-config-typescript": "^13.0.0",
    "@vue/tsconfig": "^0.5.1",
    "eslint": "^8.57.0",
    "eslint-plugin-vue": "^9.23.0",
    "npm-run-all2": "^6.2.0",
    "prettier": "^3.2.5",
    "sass": "^1.33.0",
    "sass-embedded": "^1.78.0",
    "typescript": "~5.4.0",
    "vite": "^5.3.1",
    "vue-tsc": "^2.0.21"
  }
}

================
File: readme.md
================
# V-Notes
This is a simple application for creating and managing notes.

## Tech stack 
![Vue](https://img.shields.io/badge/vue-%2335495e.svg?style=for-the-badge&logo=vuedotjs&logoColor=%234FC08D)
![Vite](https://img.shields.io/badge/vite-%23646CFF.svg?style=for-the-badge&logo=vite&logoColor=white)
![Pinia](https://img.shields.io/badge/Pinia-g?style=for-the-badge&logo=databricks&logoColor=%23fff)
![Ts](https://img.shields.io/badge/typescript-%23007ACC.svg?style=for-the-badge&logo=typescript&logoColor=white)

## Run Locally

- Clone the project

```bash
git clone https://github.com/Alexander-Shulginov/V-Notes
```

- Go to the project directory

```bash
cd V-Notes
```

- Install dependencies

```bash 
npm i
```

- Start the server

```bash 
npm run dev
```

## Hotkeys
`Ctrl + s` - toggle sidebar  
`Ctrl + c` - toggle color theme  
`Ctrl + m` - toggle menu   
`right swipe` - show sidebar  
`left swipe` - hide sidebar  
`double tap` - select note  

<!-- анимации добавления/удаления элементов списка не оч
анимации добавления/удаления элементов списка не оч
адаптив настроек
убирать фокус с textarea при открывании сайдбара свайпом

---------
дата создания заметки
корзину
---------

-->

================
File: tsconfig.app.json
================
{
    "extends": "@vue/tsconfig/tsconfig.dom.json",
    "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
    "exclude": ["src/**/__tests__/*"],
    "compilerOptions": {
        "composite": true,
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

        "baseUrl": ".",
        "paths": {
            "@/*": ["./src/*"]
        }
    }
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}

================
File: tsconfig.node.json
================
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}

================
File: vite.config.ts
================
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { quasar, transformAssetUrls } from '@quasar/vite-plugin'
// https://vitejs.dev/config/
export default defineConfig({
    plugins: [
        vue({
            template: { transformAssetUrls }
        })
    ],
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url))
        }
    }
})
